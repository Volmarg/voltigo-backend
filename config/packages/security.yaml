security:
    enable_authenticator_manager: true
    password_hashers:
        App\Entity\Security\User:
            algorithm: auto

    providers:
        app_user_provider:
            entity:
                class: App\Entity\Security\User
                property: email
        api_user:
            entity:
                class: App\Entity\Security\ApiUser
                property: username

    # see: https://github.com/lexik/LexikJWTAuthenticationBundle
    firewalls:
        dev:
            pattern: ^/(_(wdt)|css|images|js|_profiler)/?
            security: false

        login:
            user_checker: App\Security\UserChecker\LoginUserChecker
            provider: app_user_provider
            pattern: ^/login
            stateless: true
            json_login:
                check_path: /login
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        main:
            pattern: ^(?!/api)
            stateless: true
            provider: app_user_provider
            guard:
                authenticators:
                    - 'App\Security\LexitBundleJwtTokenAuthenticator'
        api:
            pattern: ^/api
            stateless: true
            provider: api_user
            json_login:
                check_path: /api/auth/login
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
            entry_point: lexik_jwt_authentication.jwt_token_authenticator
            guard:
                authenticators:
                    - 'App\Security\Api\ApiJwtTokenAuthenticator'

    # Keep in mind that every route which matches the path for which role is PUBLIC (no auth necessary)
    # Requires that action method called for this route has also proper attribute like for example
    # Jwt Authentication uses [JwtAuthenticationDisabledAttribute]
    # This is necessary due to custom logic for [front<->backend authentication] via JWT tokens
    # todo: would be nice to be able to set custom attribute "csrfDisabled=true" instead of array in security listener
    # >WARNING< cannot rely on user logic in `allow_if` in here, as it will not have the token in request at this point (dunno why)
    access_control:
        # public routes
        - { path: ^/login, roles: PUBLIC_ACCESS }
        - { path: ^/system/security/get-csrf-token, roles: PUBLIC_ACCESS }
        - { path: ^/system/state/is-system-disabled, roles: PUBLIC_ACCESS } # this is used front-wide even on login page so must be public
        - { path: ^/system/get-password-constraints, roles: PUBLIC_ACCESS } # used in registration
        - { path: ^/system/geo-data/get-internally-supported-countries, roles: PUBLIC_ACCESS } # used in registration
        - { path: ^/storage/insert-frontend-error-storage-data, roles: PUBLIC_ACCESS }
        - { path: ^/reset-password, roles: PUBLIC_ACCESS }
        - { path: ^/user/base-data/email/change, roles: PUBLIC_ACCESS }
        - { path: ^/register-user, roles: PUBLIC_ACCESS }
        - { path: ^/activate-user, roles: PUBLIC_ACCESS }
        - { path: ^/trap, roles: PUBLIC_ACCESS }
        - { path: ^/download, roles: PUBLIC_ACCESS }
        - { path: ^/request-password-reset-link, roles: PUBLIC_ACCESS }

        # special paths
        - { path: ^/debug, roles: [ROLE_DEVELOPER, ROLE_DEBUGGER] }
        - { path: ^/.*, roles: IS_AUTHENTICATED_FULLY } # all other paths - must always be last

        # API
        - { path: "^api/auth", roles: PUBLIC_ACCESS }
        - { path: "^api", roles: IS_AUTHENTICATED_FULLY }
